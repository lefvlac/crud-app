{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lefteris\\\\Desktop\\\\React\\\\crud-app\\\\src\\\\store\\\\GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer, useEffect, useState } from \"react\";\nimport AppReducer from \"./AppReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialstate = {\n  isLoggedIn: false,\n  onLogin: () => {},\n  onLogout: () => {}\n};\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); //Provider\n\nexport const GlobalProvider = props => {\n  _s();\n\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const storedUserInformation = localStorage.getItem(\"isLoggedIn\");\n\n    if (storedUserInformation === \"1\") {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const loginHandler = () => {\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    setIsLoggedIn(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogin: loginHandler,\n      onLogout: logoutHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GlobalProvider, \"6NswkZ/N5bTDl9W8sZPMIFoJ1i4=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["C:/Users/Lefteris/Desktop/React/crud-app/src/store/GlobalState.js"],"names":["React","createContext","useReducer","useEffect","useState","AppReducer","initialstate","isLoggedIn","onLogin","onLogout","GlobalContext","initialState","GlobalProvider","props","state","dispatch","setIsLoggedIn","storedUserInformation","localStorage","getItem","loginHandler","setItem","logoutHandler","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,SAA3C,EAAsDC,QAAtD,QAAsE,OAAtE;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,KADO;AAEnBC,EAAAA,OAAO,EAAE,MAAM,CAAE,CAFE;AAGnBC,EAAAA,QAAQ,EAAE,MAAM,CAAE;AAHC,CAArB;AAKA,OAAO,MAAMC,aAAa,gBAAGT,aAAa,CAACU,YAAD,CAAnC,C,CAEP;;AACA,OAAO,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAAA;;AACvC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,UAAU,CAACG,UAAD,EAAaM,YAAb,CAApC;AACA,QAAM,CAACJ,UAAD,EAAaS,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,qBAAqB,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAA9B;;AACA,QAAIF,qBAAqB,KAAK,GAA9B,EAAmC;AACjCD,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF,GALQ,EAKN,EALM,CAAT;;AAMA,QAAMI,YAAY,GAAG,MAAM;AACzBF,IAAAA,YAAY,CAACG,OAAb,CAAqB,YAArB,EAAmC,GAAnC;AACAL,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GAHD;;AAIA,QAAMM,aAAa,GAAG,MAAM;AAC1BJ,IAAAA,YAAY,CAACK,UAAb,CAAwB,YAAxB;AACAP,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAHD;;AAIA,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLT,MAAAA,UAAU,EAAEA,UADP;AAELC,MAAAA,OAAO,EAAEY,YAFJ;AAGLX,MAAAA,QAAQ,EAAEa;AAHL,KADT;AAAA,cAOGT,KAAK,CAACW;AAPT;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA5BM;;GAAMZ,c;;KAAAA,c","sourcesContent":["import React, { createContext, useReducer, useEffect, useState } from \"react\";\r\nimport AppReducer from \"./AppReducer\";\r\n\r\nconst initialstate = {\r\n  isLoggedIn: false,\r\n  onLogin: () => {},\r\n  onLogout: () => {},\r\n};\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n//Provider\r\nexport const GlobalProvider = (props) => {\r\n  const [state, dispatch] = useReducer(AppReducer, initialState);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  useEffect(() => {\r\n    const storedUserInformation = localStorage.getItem(\"isLoggedIn\");\r\n    if (storedUserInformation === \"1\") {\r\n      setIsLoggedIn(true);\r\n    }\r\n  }, []);\r\n  const loginHandler = () => {\r\n    localStorage.setItem(\"isLoggedIn\", \"1\");\r\n    setIsLoggedIn(true);\r\n  };\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"isLoggedIn\");\r\n    setIsLoggedIn(false);\r\n  };\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        isLoggedIn: isLoggedIn,\r\n        onLogin: loginHandler,\r\n        onLogout: logoutHandler,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}